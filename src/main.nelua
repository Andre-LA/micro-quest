--[[ This Source Code Form is subject to the terms of the Mozilla Public
     License, v. 2.0. If a copy of the MPL was not distributed with this
     file, You can obtain one at https://mozilla.org/MPL/2.0/. ]]

## context.rootpragmas.nogc = true
## local DEV_MODE = false

require 'wasm4'
local math = require 'math'

-- pixel_art
local pixel_art_width <comptime> = 80
local pixel_art_height <comptime> = 64
local pixel_art_flags <comptime> = 1 -- BLIT_2BPP
local pixel_art: [1280]uint8 <const> = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x00,0x15,0x54,0x00,0x55,0x50,0x01,0x55,0x40,0x6a,0xaa,0xaa,0xa9,0x00,0x00,0x00,0x00,0x00,0x1a,0xaa,0x40,0x6a,0xa9,0x01,0xaa,0xa4,0x06,0xaa,0x90,0x6a,0xaa,0xaa,0xa9,0x00,0x00,0x00,0x00,0x00,0x19,0x56,0x40,0x6a,0x95,0x01,0x5a,0xa4,0x06,0xaa,0x90,0x6a,0xaa,0xaa,0xa9,0x00,0x00,0x00,0x00,0x00,0x1a,0x5a,0x40,0x6a,0xa5,0x01,0x6a,0xa4,0x06,0xaa,0x90,0x6a,0xaa,0xa9,0x55,0x00,0x00,0x00,0x00,0x00,0x1a,0xaa,0x40,0x6a,0xa9,0x01,0xaa,0xa4,0x06,0xaa,0x90,0x6a,0xaa,0xa9,0xfd,0x00,0x00,0x00,0x00,0x00,0x1a,0xaa,0x40,0x6a,0xa9,0x01,0xaa,0xa4,0x06,0xaa,0x90,0x6a,0xaa,0xa9,0xfd,0x00,0x00,0x00,0x00,0x00,0x1a,0xaa,0x40,0x6a,0xa9,0x01,0xaa,0xa4,0x06,0xaa,0x90,0x6a,0xa9,0x55,0xfd,0x00,0x00,0x00,0x00,0x00,0x1a,0xaa,0x40,0x6a,0xa9,0x01,0xaa,0xa4,0x06,0xaa,0x90,0x6a,0xa9,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x00,0x15,0x54,0x00,0x55,0x50,0x01,0x55,0x40,0x6a,0xa9,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x69,0x55,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xf0,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x69,0xfd,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xf0,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x55,0xfd,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xf0,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x7d,0xfd,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xf0,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x7d,0xfd,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xf0,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x54,0x00,0x00,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x01,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0f,0xc0,0x00,0x00,0x01,0x55,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0f,0xc0,0x00,0x00,0x01,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0f,0xc0,0x00,0x00,0x01,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0f,0xc0,0x00,0x01,0x55,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0f,0xc0,0x00,0x01,0xfd,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x40,0x00,0x00,0x15,0x50,0x00,0x01,0xfd,0xfd,0xfd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0xfd,0xfd,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0xfd,0xfd,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xfd,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x01,0xfd,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xc3,0xfc,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0xc0,0x00,0x30,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0xf0,0x00,0xf0,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0xff,0xff,0xf0,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x0d,0xaa,0xaa,0x7f,0xfd,0x6a,0xa9,0x70,0x00,0xff,0xff,0xf0,0x00,0x0f,0xff,0xf0,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x3f,0xff,0xc0,0x00,0x3f,0xc3,0xfc,0x00,0x00,0x00,0x00,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0x0f,0xff,0x00,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xc0,0x0d,0xaa,0xaa,0x7f,0xfd,0x6a,0xa9,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xf0,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xfc,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x3c,0x0d,0xaa,0xaa,0x7f,0xfd,0x6a,0xa9,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x0c,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0xaa,0xaa,0x7f,0xfd,0x6a,0xa9,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0xaa,0xaa,0x7f,0xfd,0x6a,0xa9,0x70,0x00,0x00,0xa8,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x02,0x56,0x00,0x02,0xa0,0x00,0x2d,0x60,0x00,0x00,0x00,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0x0b,0xd5,0x80,0x0b,0x58,0x00,0xbd,0x58,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x27,0x55,0x60,0xaf,0x56,0x80,0x95,0x58,0x00,0x00,0x00,0x0d,0xaa,0xaa,0x7f,0xfd,0x6a,0xa9,0x70,0x00,0x25,0x55,0x62,0x55,0x55,0x60,0x96,0x58,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x26,0xaa,0x62,0x56,0xa5,0x60,0x9a,0x98,0x00,0x00,0x00,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0x0a,0xaa,0x80,0xaa,0xaa,0x80,0x2a,0xa0,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0xaa,0xaa,0x7f,0xfd,0x6a,0xa9,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3d,0x55,0x55,0x7c,0x3d,0x55,0x55,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfd,0x55,0x55,0x70,0x0d,0x55,0x55,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xfc,0x3f,0xff,0xff,0xfc,0x00 }

-- final_art
local final_art_width <comptime> = 160
local final_art_height <comptime> = 160
local final_art_flags <comptime> = 1 -- BLIT_2BPP
local final_art: [6400]uint8 <const> = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x01,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x50,0x05,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x40,0x55,0x40,0x00,0x00,0x00,0x05,0x55,0x55,0x55,0x54,0x00,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x54,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0xa5,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x6a,0x55,0x56,0xaa,0xaa,0xa9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x5a,0x95,0x5a,0xaa,0xaa,0xaa,0xa8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x50,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0xaa,0x55,0x55,0x55,0x5a,0xaa,0x55,0x6a,0xaa,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x6a,0xa9,0x55,0x55,0x56,0xaa,0xaa,0x55,0x55,0x5a,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0xaa,0x95,0x55,0x55,0x6a,0xaa,0xa1,0x55,0x55,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x5a,0xaa,0xa9,0x55,0x55,0xaa,0xa5,0x55,0x55,0x6a,0xa5,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x15,0x54,0x15,0x55,0x55,0x5a,0xaa,0xa5,0x55,0x55,0x56,0x55,0x55,0x5a,0xaa,0x95,0x55,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x14,0x00,0x15,0x55,0x6a,0xaa,0x95,0x55,0x55,0x55,0x55,0x55,0xaa,0xaa,0xa5,0x55,0x56,0xa5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x56,0xa5,0x95,0x55,0x55,0x55,0x55,0x5a,0xaa,0xaa,0x95,0x6a,0xaa,0xaa,0xa9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x59,0x55,0x55,0x56,0xaa,0xaa,0xaa,0xa5,0x56,0xaa,0xaa,0xaa,0xaa,0xa9,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa9,0x6a,0xa9,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x56,0xaa,0xaa,0xaa,0x55,0xaa,0x95,0x6a,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0x9a,0xaa,0xaa,0x95,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x55,0x55,0x55,0x55,0x5a,0x95,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa5,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x56,0xa9,0x55,0x55,0x55,0x55,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x5a,0x55,0x55,0x55,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x5a,0xaa,0xaa,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x55,0x00,0x00,0x00,0x00,0x02,0xa8,0x00,0x00,0x2a,0xa5,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x5a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x54,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x2a,0xa9,0x55,0x55,0x55,0x55,0x56,0xaa,0xa5,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x5a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x40,0x00,0x00,0x00,0x00,0x28,0x08,0x00,0x00,0xaa,0xa9,0x6a,0xaa,0xa5,0x56,0xaa,0xaa,0x95,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x02,0xaa,0xa9,0x55,0x55,0x55,0x5a,0xaa,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0xaa,0x6a,0x95,0x5a,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x0a,0xaa,0x95,0x55,0x55,0x55,0x6a,0x95,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x55,0x55,0x5a,0xaa,0xaa,0xaa,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0x59,0xaa,0x95,0x55,0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x50,0x00,0x00,0xaa,0xaa,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0x96,0x55,0x55,0x6a,0xa8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0xaa,0xaa,0xaa,0xaa,0x95,0x55,0xaa,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x2a,0xaa,0xaa,0xa9,0x55,0x55,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x28,0x00,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x54,0x00,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x54,0x00,0x00,0x0a,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0xa0,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x50,0x00,0x00,0x0a,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa8,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x00,0x00,0x00,0x00,0x00,0x28,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x0a,0xaa,0xaa,0xaa,0x00,0x00,0x00,0x00,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0xa0,0x0a,0x2a,0xaa,0x00,0x00,0x22,0xaa,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x02,0xa8,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xaa,0x80,0x00,0xa0,0x00,0x00,0x82,0xaa,0x80,0x00,0x00,0x00,0x28,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0xaa,0x00,0x0a,0x8a,0x00,0x00,0xaa,0x28,0x00,0x00,0x00,0x00,0xa0,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0xa8,0x00,0x28,0x00,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x00,0x80,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x0a,0x00,0x00,0x2a,0xa0,0x00,0x2a,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x01,0x00,0x80,0x0a,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x2a,0x84,0x00,0x02,0x80,0x00,0x00,0x00,0xa0,0x00,0x00,0x00,0x40,0x80,0x28,0x80,0x00,0x00,0x00,0x00,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x82,0x80,0x2a,0x10,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x0a,0x82,0x80,0x80,0xaa,0x80,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0x80,0x00,0x00,0xa0,0x02,0x00,0x00,0x00,0x00,0x82,0x20,0xaa,0xa4,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x42,0xaa,0x00,0x80,0x80,0x80,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0x80,0x00,0x00,0x20,0x02,0xa0,0x00,0x00,0x00,0x2a,0x20,0xaa,0xaa,0x10,0x0a,0x00,0x00,0x00,0x02,0x80,0x00,0x01,0x01,0x02,0x00,0x00,0x80,0x82,0x80,0x20,0x00,0x80,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x20,0x02,0x8a,0x02,0xa8,0x00,0x28,0x20,0xa0,0xaa,0x84,0x68,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x42,0x00,0x00,0x80,0xa2,0x80,0xa0,0x02,0x00,0x00,0x0a,0x80,0x00,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x20,0x02,0x02,0x0a,0x0a,0x02,0x28,0x20,0x80,0x0a,0x2a,0x91,0x11,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x08,0x00,0x00,0x20,0x28,0xaa,0x20,0x02,0x00,0x28,0x02,0x80,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x0a,0x02,0x08,0x00,0x02,0x20,0x20,0x00,0x00,0x44,0x44,0x44,0x40,0x00,0x00,0x00,0x00,0x00,0x44,0x48,0x00,0x00,0x2a,0x00,0x28,0x20,0x0a,0x80,0xa8,0x02,0x80,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x0a,0x02,0x88,0x20,0x02,0x20,0x20,0x00,0x00,0x11,0x11,0x11,0x10,0x00,0x00,0x00,0x00,0x01,0x11,0x18,0x10,0x00,0x00,0x00,0x00,0x0a,0xa2,0x00,0xa0,0x02,0x80,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x20,0x0a,0x00,0x88,0x28,0x0a,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x44,0x48,0x04,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0xa0,0x0a,0xa8,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x20,0x0a,0x00,0x88,0x2a,0xa0,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x11,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0xa0,0x0a,0xaa,0x2a,0xaa,0x00,0x00,0x80,0x00,0x00,0x00,0x20,0x0a,0x00,0x82,0x80,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x40,0x00,0x00,0x00,0x00,0x44,0x68,0x04,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x80,0x2a,0x8a,0x2a,0xaa,0x80,0x00,0x00,0x00,0x00,0x00,0x28,0x02,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x10,0x00,0x00,0x00,0x11,0x11,0x28,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x02,0x00,0x28,0x0a,0xaa,0xaa,0x80,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x40,0x44,0x60,0x00,0x00,0x02,0x00,0x00,0x00,0x20,0x00,0x00,0x20,0x0a,0xa8,0x2a,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,0x00,0x00,0x00,0x01,0x11,0x10,0x10,0x00,0x28,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0xaa,0xaa,0x80,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x40,0x00,0x00,0x40,0x44,0x64,0x00,0x02,0x80,0x00,0x00,0x02,0x80,0x40,0x00,0x00,0x00,0x2a,0xaa,0x80,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x10,0x00,0x01,0x01,0x11,0x91,0x11,0x28,0x00,0x00,0x00,0x0a,0x11,0x00,0x00,0x00,0x00,0x00,0x02,0x80,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x40,0x00,0x00,0x44,0x44,0x44,0xa0,0x00,0x00,0x00,0x28,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x11,0x10,0x01,0x01,0x11,0x91,0x11,0x80,0x00,0x00,0x00,0xa1,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x44,0x40,0x00,0x44,0x44,0x44,0x80,0x00,0x00,0x06,0x80,0x00,0x00,0x00,0xaa,0xa0,0x00,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x19,0x11,0x11,0x11,0x11,0x11,0x91,0x11,0xa0,0x00,0x00,0x2a,0x00,0x00,0x00,0xaa,0x11,0x19,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x66,0x44,0x44,0x44,0x44,0x46,0x44,0x44,0x6a,0x00,0x06,0xa4,0x40,0x00,0x0a,0xa8,0x44,0x44,0x40,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x19,0x91,0x11,0x11,0x11,0x19,0x91,0x11,0x02,0xaa,0xa8,0x01,0x10,0x00,0x2a,0x91,0x11,0x11,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x46,0x64,0x44,0x44,0x44,0x66,0x44,0x44,0x40,0x44,0x04,0x44,0x00,0x02,0xa8,0x44,0x44,0x44,0x40,0x0a,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x11,0x11,0x11,0x11,0x11,0x99,0x11,0x11,0x11,0x19,0x91,0x11,0x10,0x01,0x00,0x00,0x10,0x0a,0x91,0x11,0x11,0x11,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x04,0x44,0x44,0x44,0x46,0x66,0x44,0x44,0x44,0x66,0x44,0x44,0x44,0x44,0x00,0x04,0x00,0x6a,0x44,0x44,0x44,0x44,0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x10,0x11,0x11,0x11,0x11,0x11,0x99,0x91,0x11,0x11,0x19,0x11,0x11,0x11,0x11,0x00,0x10,0x01,0x29,0x11,0x11,0x11,0x10,0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x66,0x44,0x44,0x44,0x64,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0xa4,0x44,0x44,0x44,0x00,0x00,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x19,0x91,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x10,0x01,0x11,0xa1,0x11,0x11,0x10,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x40,0x04,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x46,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x64,0x44,0xa4,0x44,0x44,0x00,0x00,0x2a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x10,0x11,0x11,0x11,0x11,0x11,0x10,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x91,0x11,0xa1,0x11,0x10,0x00,0x00,0xa8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x46,0x44,0x44,0xa8,0x44,0x40,0x00,0x02,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x11,0x19,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x99,0x91,0x11,0xaa,0x11,0x00,0x00,0xaa,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x46,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0xaa,0xaa,0xaa,0x84,0x44,0x46,0x66,0x44,0x44,0x6a,0xaa,0x44,0xaa,0xa8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x11,0x11,0x19,0x99,0x11,0x11,0x11,0x11,0x12,0xaa,0xaa,0xaa,0xaa,0xa9,0x11,0x11,0x99,0x11,0x11,0x12,0xaa,0xaa,0xaa,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x04,0x44,0x44,0x44,0x44,0x44,0x46,0x66,0x66,0x64,0x44,0x44,0x4a,0xaa,0xaa,0xaa,0xaa,0xaa,0x44,0x46,0x64,0x44,0x44,0x40,0x4a,0xaa,0x80,0x00,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x99,0x99,0x99,0x11,0x11,0x2a,0xaa,0xaa,0xaa,0xaa,0xaa,0x11,0x11,0x11,0x11,0x10,0x01,0x11,0x11,0x11,0x11,0x11,0x11,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x46,0x66,0x66,0x44,0x44,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa4,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x99,0x91,0x12,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa9,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x10,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x4a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x1a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x00,0x04,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x6a,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x01,0x11,0x10,0x01,0x11,0x11,0x11,0x11,0x11,0x11,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x91,0x11,0x11,0x11,0x10,0x11,0x11,0x11,0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x45,0x44,0x44,0x00,0x00,0x00,0x00,0x04,0x44,0x44,0x44,0x44,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x84,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x54,0x05,0x40,0x00,0x00,0x00,0x00,0x00,0x01,0x11,0x11,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x91,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2a,0xaa,0xaa,0xaa,0x95,0x55,0x5a,0xaa,0xa0,0x00,0x00,0x00,0x44,0x44,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x84,0x44,0x44,0x44,0x66,0x44,0x44,0x44,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x5a,0xaa,0xa0,0x00,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x91,0x11,0x99,0x99,0x11,0x10,0x00,0x00,0x2a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x5a,0xaa,0xaa,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x44,0x66,0x64,0x40,0x00,0x2a,0xaa,0x85,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xaa,0xaa,0xa8,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x91,0x11,0x11,0x10,0x02,0xaa,0x9a,0xa5,0x55,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x6a,0xaa,0xaa,0x82,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x84,0x44,0x40,0x0a,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x40,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xaa,0xaa,0x92,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x01,0x0a,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0x54,0x00,0x00,0x00,0x00,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x5f,0xff,0xff,0xff,0x55,0x55,0x55,0x6a,0xa4,0x05,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x0a,0xa6,0xaa,0xaa,0x56,0xaa,0xa5,0x55,0x55,0x55,0x40,0x00,0x00,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x57,0xff,0xff,0xfe,0xaa,0xb5,0x55,0x55,0x56,0xa5,0x41,0x55,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x81,0x69,0x5a,0xaa,0xaa,0xaa,0xa5,0x55,0x55,0x55,0x55,0x54,0x00,0x00,0x00,0x00,0x05,0x55,0x55,0x55,0x55,0x7f,0xff,0xff,0xfe,0xaa,0xaa,0x95,0x55,0x55,0x6a,0x55,0x55,0x56,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x85,0x55,0x56,0xaa,0xaa,0xaa,0x95,0x55,0x55,0x55,0x55,0x55,0x40,0x00,0x00,0x00,0x00,0x0a,0x95,0x55,0x55,0xff,0xff,0xff,0xff,0xfa,0xaa,0xab,0xd5,0x55,0x56,0x95,0x55,0x55,0x5a,0xaa,0xaa,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x56,0xaa,0xa9,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x00,0x00,0xff,0xff,0xff,0xe9,0x55,0x55,0xff,0xff,0xff,0xff,0xff,0xfa,0xaa,0xf5,0x55,0x55,0xa5,0x55,0xa9,0x55,0x5a,0xaa,0xaa,0xaa,0xa9,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x05,0x55,0x00,0x00,0xff,0xff,0xff,0xfa,0x55,0x55,0xff,0xff,0xaf,0xff,0xff,0xff,0xea,0xb5,0x55,0x55,0x55,0x55,0x56,0xa9,0x55,0x6a,0xaa,0xaa,0xa9,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x15,0x50,0x00,0x00,0x03,0xff,0xf2,0x15,0x55,0xff,0xff,0xfa,0xaa,0xbf,0xaa,0xaf,0xe5,0x55,0x55,0x55,0x55,0x55,0x56,0xaa,0x55,0x6a,0xaa,0xa5,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x05,0x55,0x00,0x00,0x00,0x00,0x0f,0x95,0x55,0xff,0xff,0xff,0xff,0xea,0xff,0xff,0xfd,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0xaa,0x55,0xa4,0x65,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x00,0x55,0x50,0x00,0x00,0x00,0x0f,0xa5,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xaa,0x55,0x05,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x40,0x05,0x55,0x00,0x00,0x00,0x0f,0xe5,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe9,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xaa,0x40,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x55,0x00,0x00,0x00,0x0f,0xe5,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe9,0x55,0x55,0x56,0x80,0xfc,0x00,0x05,0x55,0x55,0x56,0x95,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x10,0x05,0x00,0x00,0x00,0x0f,0xe5,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xe9,0x55,0x55,0x5a,0x00,0xff,0xff,0xea,0x85,0x55,0x55,0x55,0x55,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x01,0x00,0x00,0x00,0x00,0x0f,0xc5,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe9,0x55,0x55,0x58,0x00,0x0f,0xff,0xff,0xea,0xaa,0x55,0x55,0x55,0x54,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x05,0x54,0x00,0x00,0x00,0x00,0x0f,0xc5,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe9,0x55,0x55,0x58,0x00,0x03,0xff,0xff,0xff,0xaa,0xa5,0x55,0x55,0x55,0x54,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x05,0x40,0x00,0x00,0x00,0x0f,0xc5,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xea,0x55,0x55,0x60,0x00,0x00,0x03,0xff,0xff,0xfc,0xaa,0x55,0x55,0x55,0x55,0x54,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x40,0x55,0x00,0x00,0x00,0x0f,0xc5,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0x55,0x55,0x60,0x00,0x00,0x00,0x00,0xff,0xff,0xfa,0xa5,0x55,0x55,0x55,0x55,0x55,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x0f,0xc0,0x05,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf9,0x55,0x55,0x60,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x2a,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x00,0x00,0x00,0x0f,0xc0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf9,0x55,0x55,0x60,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0x0a,0x95,0x55,0x55,0x55,0x01,0x55,0x55,0x40,0x05,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x0f,0xe8,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf9,0x55,0x55,0x60,0x00,0x00,0x3f,0xc0,0x00,0x00,0x00,0x00,0x25,0x55,0x55,0x55,0x40,0x00,0x00,0x55,0x40,0x01,0x55,0x55,0x55,0x40,0x15,0x00,0x00,0x00,0x0f,0xe8,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x55,0x55,0x50,0xfc,0x00,0x3f,0xc0,0x00,0x00,0x00,0x00,0x29,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x05,0x40,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,0xea,0x83,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xff,0x00,0xff,0xc0,0x00,0x00,0x00,0x01,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x0f,0xca,0x83,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x20,0xff,0xf3,0xff,0xc0,0x00,0x3f,0xff,0xff,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x03,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x20,0xff,0xff,0xff,0x00,0x00,0x3f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x2a,0x80,0xa0,0xff,0xff,0xfc,0x00,0x00,0x3f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x2a,0xaa,0x80,0x0b,0xff,0xfc,0x00,0x00,0x3f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0xaa,0xa0,0x00,0x2a,0xff,0xff,0xc0,0x00,0x3f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0x2a,0xaf,0xff,0xfc,0x00,0x3f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xaa,0xab,0xff,0xfc,0x00,0x3f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x05,0x55,0x55,0x55,0x55,0x51,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0xaa,0xaa,0xff,0xfc,0x00,0x0f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x00,0xa5,0xaa,0xbf,0xff,0x00,0x0f,0xff,0xff,0xc0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x51,0xdd,0xdd,0xd1,0x11,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x02,0x96,0xaa,0xaf,0xff,0x00,0x0f,0xff,0xea,0xaa,0xaa,0xa9,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x47,0x77,0x77,0x77,0x77,0x44,0x47,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x02,0x56,0xaa,0xa0,0xff,0x00,0x3f,0xf0,0x2a,0xaa,0xaa,0xaa,0xa0,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x11,0x11,0x11,0x11,0x11,0x13,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x55,0x40,0x02,0x56,0xaa,0x80,0x00,0x00,0x3f,0xf0,0x2a,0x00,0x00,0x0a,0x00,0xa5,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x47,0xff,0xff,0xff,0xff,0xff,0xc7,0x77,0x54,0x0a,0x56,0xaa,0x00,0x00,0x00,0x3f,0xf0,0x00,0x00,0x00,0x00,0x30,0x25,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x11,0x11,0x11,0x11,0x11,0xdd,0xd1,0x13,0xff,0xff,0xff,0xff,0x11,0xdd,0xd5,0x49,0x5a,0xaa,0x00,0x00,0x00,0x3f,0xfa,0x80,0x00,0x00,0x00,0xf0,0x29,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x44,0x44,0x44,0x44,0x47,0x77,0x77,0x74,0x44,0x44,0xfc,0x44,0x47,0x77,0x74,0x49,0x5a,0xa8,0x00,0x00,0x00,0x3f,0xca,0xbf,0xff,0xff,0x03,0xfc,0x09,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x11,0x15,0x51,0x11,0x11,0xdd,0xdd,0xdd,0xd1,0x11,0x11,0x11,0x11,0x11,0x11,0x1a,0x6a,0xa8,0x00,0x00,0x00,0x3f,0xc2,0xaf,0xff,0xff,0xff,0xff,0x02,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x45,0x55,0x55,0x55,0x44,0x47,0x77,0x77,0x77,0x77,0x44,0x44,0x44,0x44,0x44,0x44,0x46,0x6a,0xa0,0x00,0x00,0x00,0x3f,0xc2,0xaf,0xff,0xff,0xff,0xff,0xc2,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x15,0x55,0x55,0x55,0x11,0x1d,0xdd,0xdd,0xdd,0xdd,0x11,0x11,0x11,0x11,0x11,0x11,0x12,0xaa,0xa0,0x00,0x00,0x00,0x00,0x00,0xaf,0xff,0xff,0xff,0xff,0xc2,0x95,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x45,0x55,0x55,0x55,0x44,0x47,0x77,0x77,0x77,0x77,0x44,0x44,0x44,0x44,0x44,0x44,0x46,0xaa,0x84,0x05,0x00,0x00,0x00,0x00,0xab,0xff,0xff,0xff,0xff,0xf0,0x95,0x55,0x55,0x55,0x50,0x00,0x00,0x00,0x00,0x15,0x51,0x55,0x55,0x55,0x11,0x1d,0xdd,0xdd,0xdd,0xdd,0x11,0x11,0x55,0x11,0x11,0x11,0x11,0x91,0x11,0x00,0x40,0x00,0x00,0x00,0x2b,0xff,0xff,0xff,0xff,0xfc,0x95,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x47,0x77,0x77,0x77,0x77,0x44,0x44,0x55,0x55,0x44,0x44,0x44,0x44,0x44,0x44,0x10,0x00,0x00,0x00,0x2b,0xff,0xff,0xff,0xff,0xfc,0x25,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x11,0xdd,0xdd,0xdd,0x11,0x11,0x11,0x55,0x55,0x55,0x11,0xdd,0x11,0x11,0xdd,0x00,0x00,0x00,0x00,0x2f,0xff,0xff,0xff,0xff,0xfc,0x25,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x65,0x55,0x55,0x55,0x44,0x44,0x47,0x77,0x74,0x44,0x44,0x44,0x55,0x55,0x55,0x47,0x77,0x44,0x44,0x77,0x44,0x00,0x00,0x00,0x3b,0xff,0xff,0xff,0xff,0xfc,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x59,0x95,0x55,0x55,0x51,0x11,0x11,0xd1,0x11,0x11,0x11,0x11,0x55,0x55,0x55,0x11,0xdd,0x11,0x11,0x1d,0xd0,0x00,0x00,0x00,0x0b,0xff,0xff,0xff,0xff,0xfc,0x21,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x44,0x44,0x44,0x44,0x44,0x44,0x45,0x55,0x55,0x55,0x47,0x77,0x44,0x44,0x47,0x74,0x40,0x00,0x00,0x0b,0xff,0xff,0xff,0xff,0xff,0x09,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x51,0x11,0x11,0x11,0x11,0x11,0x15,0x55,0x55,0x55,0x11,0xdd,0x11,0x55,0x11,0xdd,0x00,0x00,0x00,0x0b,0xff,0xff,0xff,0xff,0xff,0x08,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x44,0x44,0x44,0x44,0x55,0x55,0x55,0x55,0x44,0x74,0x45,0x55,0x54,0x77,0x40,0x00,0x00,0x0b,0xff,0xff,0xff,0xff,0xff,0x08,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x51,0x11,0x11,0x11,0x11,0x15,0x55,0x55,0x55,0x11,0xdd,0x11,0x55,0x55,0x1d,0xd0,0x00,0x00,0x0b,0xff,0xff,0xff,0xff,0xff,0xc8,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x54,0x44,0x45,0x55,0x66,0x55,0x55,0x54,0x74,0x45,0x55,0x55,0x47,0x74,0x40,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xc8,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x59,0x99,0x55,0x99,0x95,0x55,0x11,0x15,0x55,0x55,0x51,0xdd,0x10,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xc0,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x66,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0x55,0x55,0x55,0x55,0x55,0x55,0x65,0x55,0x55,0x55,0x55,0x55,0x57,0x74,0x40,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xf0,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x99,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x11,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xf0,0x05,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x47,0x44,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xf0,0x05,0x55,0x50,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x59,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x95,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x5d,0xd0,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xf0,0x05,0x55,0x55,0x00,0x05,0x55,0x55,0x55,0x55,0x56,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x66,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x74,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xf0,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x95,0x55,0x55,0x55,0x55,0x99,0x55,0x95,0x55,0x55,0x55,0x55,0x99,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x15,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x65,0x66,0x55,0x55,0x55,0x55,0x56,0x65,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x75,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x95,0x55,0x55,0x55,0x55,0x55,0x99,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x1d,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x66,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x44,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x99,0x59,0x55,0x55,0x55,0x55,0x55,0x55,0x99,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x51,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x56,0x66,0x65,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x54,0x40,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x59,0x95,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x59,0x99,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x10,0x15,0x55,0x55,0x55,0x55,0x55,0x55,0x55 }

## print('pixel art size: ', pixel_art.type.size)
## print('final art size: ', final_art.type.size)

-- General --

local Gamepad_Prev = $GAMEPAD1

local Vec2 = @record{
  x: int16, y: int16,
}

local Vec2.zero: Vec2 = {0, 0}

local Hitbox = @record{
  x: int16, y: int16,
  w: byte, h: byte,
}

function Hitbox:get_center(offset: facultative(Vec2)): Vec2
  ## if offset.type.is_niltype then
    return Vec2{
      x = math.ifloor(self.x + self.w/2),
      y = math.ifloor(self.y + self.h/2),
    }
  ## else
    return Vec2{
      x = math.ifloor(self.x + offset.x + self.w/2),
      y = math.ifloor(self.y + offset.y + self.h/2),
    }
  ## end
end

function Hitbox:is_point_intersecting(pt: *Vec2): boolean
  return (
    pt.x >= self.x and pt.x <= self.x + self.w and
    pt.y >= self.y and pt.y <= self.y + self.h
  )
end

function Hitbox:get_intersection(other: *Hitbox): (boolean, Hitbox)
  local no_intersection = (
    self.x + self.w < other.x or
    self.x > other.x + other.w or
    self.y > other.y + other.h or
    self.y + self.h < other.y
  )

  if likely(no_intersection) then
    return false, Hitbox{}
  else
    local p1x = math.max(self.x, other.x)
    local p1y = math.max(self.y, other.y)

    local p2x = math.min(self.x + self.w, other.x + other.w)
    local p2y = math.min(self.y + self.h, other.y + other.h)

    local w, h = math.abs(p2x - p1x), math.abs(p2y - p1y)

    local intersection: Hitbox = { p1x, p1y, w, h }
    return true, intersection
  end
end

function Hitbox:get_intersection_with_offsets(self_pos: *Vec2, other: *Hitbox, other_pos: *Vec2): (boolean, Hitbox)
  local self_hb: Hitbox = { self.x + self_pos.x, self.y + self_pos.y, self.w, self.h }
  local other_hb: Hitbox = { other.x + other_pos.x, other.y + other_pos.y, other.w, other.h }

  return self_hb:get_intersection(other_hb)
end

-- Stairs --
local Stairs = @record{
  pos: Vec2,
}

-- Wall --
local Wall = @record{
  hb: Hitbox,
}

-- Spike Roller --
local SpikeRoller = @record{
  pos: Vec2,
  dir: record{x: int8, y: int8},
}

-- Enemy --

local EnemyState = @enum(byte) {
  Idle = 0,
  Walking,
  Attacking,
}

local Enemy = @record{
  pos: Vec2,
  hb_receiver: Hitbox,
  hb_attacker: Hitbox,
  state: EnemyState,
  health_points: byte,
}

function Enemy.init(pos: Vec2): Enemy
  return Enemy{
    =pos,
    health_points = 3,
    hb_receiver = Hitbox{-1, 1, 13, 11},
    hb_attacker = Hitbox{ 3, 5,  5,  4},
  }
end

-- Player --

local PlayerState = @enum(byte) {
  Idle = 0,
  Walking,
  Attacking,
}

local PlayerDir = @enum(byte) {
  Down  = 0,
  Right = 11,
  Left  = 22,
  Up    = 33,
}

local Player = @record{
  pos: Vec2,
  dir: PlayerDir,
  hb_receiver: Hitbox,
  hb_attacker: Hitbox,
  state: PlayerState,
  attack_fc: uint32,
  health_points: byte,
  last_gamepad: uint8,
}

function Player.attacker_hb_right(): Hitbox
  return Hitbox{9, -3, 9, 16}
end

function Player.attacker_hb_left(): Hitbox
  return Hitbox{-8, -3, 9, 16}
end

function Player.attacker_hb_up(): Hitbox
  return Hitbox{-3, -6, 16, 9}
end

function Player.attacker_hb_down(): Hitbox
  return Hitbox{-3, 8, 16, 9}
end

function Player.init(): Player
  return Player{
    hb_receiver = Hitbox{ 2, 3, 6, 6},
    hb_attacker = Player.attacker_hb_down(),
    health_points = 3,
  }
end

-- Game State and Rooms (levels) --
local Room = @record{
  player: Player,
  enemies: [3]Enemy,
  spike_rollers: [5]SpikeRoller,
  walls: [16]Wall,
  stairs: [2]Stairs,
}

function Room:post_setup()
  self.walls[0].hb.x = self.stairs[0].pos.x
  self.walls[0].hb.y = self.stairs[0].pos.y

  -- check if boundaries will overwrite other walls
  ## if DEV_MODE then
    for i = #self.walls - 1, #self.walls - 4, -1 do
      check(
        self.walls[i].hb.x == 0 and self.walls[i].hb.y == 0 and
        self.walls[i].hb.w == 0 and self.walls[i].hb.h == 0,
        'alert: wall bounderies overwrite'
      )
    end
  ## end

  -- boundaries (up-down-left-right)
  self.walls[#self.walls - 4].hb = { -16, -64, 192,  64 }
  self.walls[#self.walls - 3].hb = { -16, 160, 192,  64 }
  self.walls[#self.walls - 2].hb = { -63,   0,  64, 192 }
  self.walls[#self.walls - 1].hb = { 159,   0,  64, 192 }

  self.player.pos = self.stairs[0].pos
  self.player.pos.x = self.player.pos.x + 16
end

function Room.room0(): Room
  local room = Room{
    player = Player.init(),
    enemies = {},
    walls = {
      -- stairs wall
      { hb = {0, 0, 16, 16} },
      -- level walls
      { hb = {16, 44, 16, 72} },
      { hb = {128, 44, 16, 72} },
      { hb = {32, 44, 96, 16} },
      { hb = {32, 100, 96, 16} },
    },
    stairs = {
      { pos = {32, 72}},
      { pos = {112, 72 }},
    }
  }

  room:post_setup()

  return room
end

function Room.room1(): Room
  local room = Room{
    player = Player.init(),
    enemies = {
      Enemy.init({76, 96}),
    },
    walls = {
      -- stairs wall
      { hb = {0, 0, 16, 16} },
      -- level walls
      { hb = {48, 0, 16, 160} },
      { hb = {96, 0, 16, 160} },
    },
    stairs = {
      { pos = {64, 0}},
      { pos = {72, (160 - 16) }},
    }
  }

  room:post_setup()

  return room
end

function Room.room2(): Room
  local room = Room{
    player = Player.init(),
    enemies = {
      Enemy.init({24, 128}),
      Enemy.init({72, 64}),
      Enemy.init({128, 96}),
    },
    walls = {
      -- stairs wall
      { hb = {0, 0, 16, 16} },
      -- level walls
      { hb = {48,  0, 16, 128} },
      { hb = {96, 160-128, 16, 128} },
    },
    stairs = {
      { pos = {8, 16}},
      { pos = { (160 - 32), (160 - 16) }},
    }
  }

  room:post_setup()

  return room
end

function Room.room3(): Room
  local room = Room{
    player = Player.init(),
    enemies = {
      Enemy.init({112, 12}),
      Enemy.init({12, 96}),
    },
    spike_rollers = {
      { pos = {48, 96}, dir = {x = 1} }
    },
    walls = {
      -- stairs wall
      { hb = {0, 0, 16, 16} },
      -- level walls
      { hb = {0, 32, 128, 16} },
      { hb = {112, 160-80, 16, 80} },
      { hb = {32, 160-112, 16, 80} },
    },
    stairs = {
      { pos = {8,  8} },
      { pos = {8, 48} },
    }
  }

  room:post_setup()

  return room
end

function Room.room4(): Room
  local room = Room{
    player = Player.init(),
    enemies = {
      Enemy.init({138, 80}),
    },
    spike_rollers = {
      { pos = { 32,  17}, dir = {x =  1} },
      { pos = { 96,  47}, dir = {x = -1} },
      { pos = { 96,  96}, dir = {y =  1} },
      { pos = { 64, 144}, dir = {y = -1} },
      { pos = { 32,  96}, dir = {y = 1} },
    },
    walls = {
      -- stairs wall
      { hb = {0, 0, 16, 16} },
      -- level walls
      { hb = { 0,    0, 160, 16 } },
      { hb = { 0,   80, 128, 16 } },
      { hb = { 16,  16,  16, 16 } },
      { hb = { 16,  64,  16, 16 } },
      { hb = { 112, 64,  16, 16 } },
      { hb = { 112, 16,  16, 16 } },
    },
    stairs = {
      { pos = {0, 40} },
      { pos = {0, 120} },
    }
  }

  room:post_setup()

  return room
end

function Room.room5(): Room
  local room = Room{
    player = Player.init(),
    enemies = {
      Enemy.init({56, 72}),
      Enemy.init({96, 72}),
      Enemy.init({96, 72}),
    },
    spike_rollers = {
      { pos = {48, 96}, dir = {x = 1} },
      { pos = {96, 32}, dir = {x = -1} },
    },
    walls = {
      -- stairs wall
      { hb = {0, 0, 16, 16} },
      -- level walls
      { hb = { 32, 0, 16, 160} },
      { hb = {112, 0, 16, 160} },
    },
    stairs = {
      { pos = {64, 144} },
      { pos = {72, 0} },
    }
  }

  room:post_setup()

  return room
end

function Room.room6(): Room
  local room = Room{
    player = Player.init(),
    enemies = {
      Enemy.init({20, 88}),
      Enemy.init({80, 76}),
    },
    spike_rollers = {
      { pos = {32, 1}, dir = {x = -1} },
      { pos = {126, 128}, dir = {y = -1} },
      { pos = {32, 127}, dir = {x = -1} },
    },
    walls = {
      -- stairs wall
      { hb = {0, 0, 16, 16} },
      -- level walls
      { hb = {  0,  50, 64, 16} },
      { hb = { 46,  34, 79, 16} },
      { hb = {109,  50, 16, 61} },
      { hb = { 48, 110, 77, 16} },
      { hb = { 48,  94, 16, 16} },
    },
    stairs = {
      { pos = {  0, 34 } },
      { pos = { 93, 72 } },
    }
  }

  room:post_setup()

  return room
end

local TransitionState = @enum(byte) {
  None = 0, Exit, Enter, End
}

local State = @record{
  frame_counter: uint32,
  transition_startfc: uint32,
  transition: TransitionState,
  seg_frame_counter: byte,
  room_index: byte,
  room: Room,
}
## print('state size: ', State.value.size)

function State:reset_room()
  switch self.room_index
  case 0 then self.room = Room.room0()
  case 1 then self.room = Room.room1()
  case 2 then self.room = Room.room2()
  case 3 then self.room = Room.room3()
  case 4 then self.room = Room.room4()
  case 5 then self.room = Room.room5()
  case 6 then self.room = Room.room6()
  end
end

function State.init(): State
  local state: State = {
    room_index = 0,
  }

  state:reset_room()

  return state
end

function State:resolve_hitback(attacked_pos: *Vec2, attacker_pos: *Vec2, use_attacker_hitback: boolean)
  local diff: Vec2 = { attacker_pos.x - attacked_pos.x, attacker_pos.y - attacked_pos.y }
  local is_horizontal = math.abs(diff.x) > math.abs(diff.y)

  local preview_hitback: Vec2 = $attacked_pos

  if is_horizontal then
    preview_hitback.x = preview_hitback.x + 8 * (diff.x > 0 and -1 or 1)
  else
    preview_hitback.y = preview_hitback.y + 8 * (diff.y > 0 and -1 or 1)
  end

  local preview_hb: Hitbox = {preview_hitback.x, preview_hitback.y, 8, 8}

  local n = is_horizontal

  for i = 0, < #self.room.walls do
    if (self.room.walls[i].hb:get_intersection(preview_hb)) then
      is_horizontal = not is_horizontal
    end
  end

  if is_horizontal then
    local offset = 8 * (diff.x > 0 and -1 or 1)
    attacked_pos.x = attacked_pos.x + offset
    if use_attacker_hitback then
      attacker_pos.x = attacker_pos.x - offset
    end
  else
    local offset = 8 * (diff.y > 0 and -1 or 1)
    attacked_pos.y = attacked_pos.y + offset
    if use_attacker_hitback then
      attacker_pos.y = attacker_pos.y - offset
    end
  end

  attacked_pos.x = math.clamp(attacked_pos.x, 2, 150)
  attacked_pos.y = math.clamp(attacked_pos.y, 2, 150)
end

local game = State.init()

-- Game Logic --

function State:start_transition(transition: TransitionState)
  game.transition = transition
  game.transition_startfc = game.frame_counter
end

function State:go_next_room()
  self.room_index = self.room_index + 1
  self:start_transition(TransitionState.Exit)
end

function State:should_go_next_room()
  local pl_center_pt = self.room.player.hb_receiver:get_center(self.room.player.pos)
  local exit_hb: Hitbox = { self.room.stairs[1].pos.x + 6, self.room.stairs[1].pos.y + 6, 4, 4 }
  return (exit_hb:is_point_intersecting(pl_center_pt))
end

function Stairs:draw(idx: byte)
  $DRAW_COLORS = 0x1230
  blitSub(pixel_art, self.pos.x, self.pos.y, 16, 16, 44, idx == 0 and 0 or 16, pixel_art_width, pixel_art_flags)
end

function Wall:simple_collision(entity_hb_o: Hitbox, entity_pos: *Vec2): boolean
  local entity_hb = entity_hb_o
  entity_hb.x = entity_hb.x + entity_pos.x
  entity_hb.y = entity_hb.y + entity_pos.y

  local is_intersecting, intersection = self.hb:get_intersection(entity_hb)

  if is_intersecting then
    local self_center, entity_center = self.hb:get_center(), entity_hb:get_center()

    if intersection.w > intersection.h then
      if self_center.y > entity_center.y then
        entity_pos.y = self.hb.y - entity_hb.h - entity_hb_o.y
      else
        entity_pos.y = self.hb.y + self.hb.h - entity_hb_o.y
      end
    elseif intersection.w < intersection.h then
      if self_center.x > entity_center.x then
        entity_pos.x = self.hb.x - entity_hb.w - entity_hb_o.x
      else
        entity_pos.x = self.hb.x + self.hb.w - entity_hb_o.x
      end
    else
      if self_center.y > entity_center.y then
        entity_pos.y = self.hb.y - entity_hb.h - entity_hb_o.y
      else
        entity_pos.y = self.hb.y + self.hb.h - entity_hb_o.y
      end
      if self_center.x > entity_center.x then
        entity_pos.x = self.hb.x - entity_hb.w - entity_hb_o.x
      else
        entity_pos.x = self.hb.x + self.hb.w - entity_hb_o.x
      end
    end
  end

  return is_intersecting
end

function Wall:draw()
  $DRAW_COLORS = 0x1232

  rect(self.hb.x, self.hb.y, self.hb.w, self.hb.h)
end

function Player:apply_hit(enemy_pos: *Vec2)
  game:resolve_hitback(self.pos, enemy_pos, true)

  self.health_points = self.health_points - 1

  if self.health_points <= 0 then
    game:reset_room()
  end
end

function Player:update()
  local isdown_input = $GAMEPAD1 & ($GAMEPAD1 ~ self.last_gamepad)

  local input_is_attacking = isdown_input & BUTTON_1 ~= 0
  local input_is_right, input_is_left, input_is_down, input_is_up = $GAMEPAD1 & BUTTON_RIGHT ~= 0,
                                                                    $GAMEPAD1 & BUTTON_LEFT ~= 0,
                                                                    $GAMEPAD1 & BUTTON_DOWN ~= 0,
                                                                    $GAMEPAD1 & BUTTON_UP ~= 0

  local attack_lock = math.abs(game.frame_counter - self.attack_fc) < 4

  if input_is_attacking then
    self.state = PlayerState.Attacking
    self.attack_fc = game.frame_counter
  elseif not attack_lock then
    if input_is_right or input_is_left or input_is_down or input_is_up then
      self.state = PlayerState.Walking
    else
      self.state = PlayerState.Idle
    end
  end

  if game.frame_counter % 2 == 0 and self.state == PlayerState.Walking then
    if input_is_right then
      self.pos.x = self.pos.x + 1
      self.dir = PlayerDir.Right
      self.hb_attacker = Player.attacker_hb_right()
    end
    if input_is_left then
      self.pos.x = self.pos.x - 1
      self.dir = PlayerDir.Left
      self.hb_attacker = Player.attacker_hb_left()
    end
    if input_is_down then
      self.pos.y = self.pos.y + 1
      self.dir = PlayerDir.Down
      self.hb_attacker = Player.attacker_hb_down()
    end
    if input_is_up then
      self.pos.y = self.pos.y - 1
      self.dir = PlayerDir.Up
      self.hb_attacker = Player.attacker_hb_up()
    end
  end

  self.last_gamepad = $GAMEPAD1
end

function Player:draw()
  local function offset_y(n: byte)
    return (game.seg_frame_counter + n) % 30 < 16 and 1 or 0
  end

  local offset_x1, offset_x2 = 0, 0
  local offset_y1 = self.state == PlayerState.Walking and offset_y(8) or 0
  local offset_y2 = self.state == PlayerState.Walking and offset_y(0) or 0

  local src_y = self.state == PlayerState.Attacking and 40 or 20

  if self.state == PlayerState.Attacking then
    switch self.dir do
    case PlayerDir.Left then
      offset_y2 = offset_y2 - 5
      offset_x2 = -6

    case PlayerDir.Right then
      offset_y2 = offset_y2 - 5
      offset_x2 = 5

    case PlayerDir.Up then
      offset_y2 = offset_y2 - 4
      offset_x2 = 0

    case PlayerDir.Down then
      offset_y2 = offset_y2 - 0
      offset_x2 = 0
    end
  end

  $DRAW_COLORS = 0x2030
  blitSub(pixel_art, self.pos.x + offset_x2, self.pos.y + offset_y2, 11, 10, self.dir, src_y, pixel_art_width, pixel_art_flags)

  $DRAW_COLORS = 0x0130
  blitSub(pixel_art, self.pos.x, self.pos.y + offset_y1,  9, 10, self.dir,  0, pixel_art_width, pixel_art_flags)

  $DRAW_COLORS = 0x2030
  src_y = self.state == PlayerState.Attacking and 30 or 10
  offset_y2 = self.state == PlayerState.Attacking and offset_y2 + 5 or offset_y2
  blitSub(pixel_art, self.pos.x + offset_x2, self.pos.y + offset_y2, 11, 10, self.dir, src_y, pixel_art_width, pixel_art_flags)
end

function SpikeRoller:hb(): Hitbox
  return Hitbox { self.pos.x, self.pos.y, 16 * (2 - math.abs(self.dir.x)), 16 * (2 - math.abs(self.dir.y)) }
end

function SpikeRoller:draw()
  if self.dir.x == 0 and self.dir.y == 0 then return end

  local sr_hb = self:hb()
  $DRAW_COLORS = 0x2230

  if math.abs(self.dir.y) > 0 then
    local src_x = game.seg_frame_counter % 8 < 4 and 28 or 44
    blitSub(pixel_art, self.pos.x, self.pos.y, 32, 16, src_x, 32, pixel_art_width, pixel_art_flags | BLIT_ROTATE)
  else
    local src_x = game.seg_frame_counter % 8 < 4 and 44 or 60
    blitSub(pixel_art, self.pos.x, self.pos.y, 16, 32, src_x, 32, pixel_art_width, pixel_art_flags)
  end
end

function SpikeRoller:update()
  if self.dir.x == 0 and self.dir.y == 0 then return end
  if game.seg_frame_counter % 2 == 1 then return end

  self.pos.x = self.pos.x + self.dir.x
  self.pos.y = self.pos.y + self.dir.y

  local sr_hb = self:hb()

  for i = 0, < #game.room.walls do
    if (sr_hb:get_intersection(game.room.walls[i].hb)) then
      self.dir.x = self.dir.x * -1
      self.dir.y = self.dir.y * -1
      break
    end
  end

  for i = 0, < #game.room.enemies do
    if (sr_hb:get_intersection_with_offsets(Vec2.zero, game.room.enemies[i].hb_receiver, game.room.enemies[i].pos)) then
      game.room.enemies[i].health_points = 0
    end
  end

  if (sr_hb:get_intersection_with_offsets(Vec2.zero, game.room.player.hb_receiver, game.room.player.pos)) then
    game:reset_room()
  end
end

function Enemy:try_get_hit()
  if self.health_points == 0 then return end

  if (self.hb_receiver:get_intersection_with_offsets(self.pos, game.room.player.hb_attacker, game.room.player.pos)) then
    self.health_points = self.health_points - 1
    game:resolve_hitback(self.pos, game.room.player.pos, false)
  end
end

function Enemy:update()
  if self.health_points == 0 then return end

  if game.seg_frame_counter % 2 == 0 then
    local diff: Vec2 = { game.room.player.pos.x - self.pos.x, game.room.player.pos.y - self.pos.y }

    if math.abs(diff.x) < (8*5) and math.abs(diff.y) < (8*5) then
      self.state = EnemyState.Walking

      if self.pos.x > game.room.player.pos.x then
        self.pos.x = self.pos.x - 1
      elseif self.pos.x + 6 <= game.room.player.pos.x then
        self.pos.x = self.pos.x + 1
      end

      if self.pos.y > game.room.player.pos.y then
        self.pos.y = self.pos.y - 1
      elseif self.pos.y + 6 <= game.room.player.pos.y then
        self.pos.y = self.pos.y + 1
      end

      if (self.hb_attacker:get_intersection_with_offsets(self.pos, game.room.player.hb_receiver, game.room.player.pos)) then
        game.room.player:apply_hit(self.pos)
      end
    else
      self.state = EnemyState.Idle
    end
  end
end

function Enemy:draw()
  if self.health_points == 0 then return end

  local offset_y, src_x = 0, 0

  switch self.state do
    case EnemyState.Idle then
      src_x = 0

    case EnemyState.Walking then
      local sprite_n = ((game.seg_frame_counter*2) // 20) % 3
      src_x = sprite_n * 11
      offset_y = sprite_n  == 2 and 3 or 0
  end

  $DRAW_COLORS = 0x1230
  blitSub(pixel_art, self.pos.x, self.pos.y - offset_y, 11, 10, src_x, 50, pixel_art_width, pixel_art_flags)
end

function State:update()
  ## if DEV_MODE then
    if $MOUSE_BUTTONS & MOUSE_LEFT ~= 0 then
      self.room.player.pos.x = $MOUSE_X
      self.room.player.pos.y = $MOUSE_Y
    end
  ## end

  if self.transition == TransitionState.None then
    self.room.player:update()

    local isdown_input = $GAMEPAD1 & ($GAMEPAD1 ~ Gamepad_Prev)

    if isdown_input & BUTTON_1 ~= 0 then
      for i = 0, < #self.room.enemies do
        self.room.enemies[i]:try_get_hit()
      end
    end

    for i = 0, < #self.room.enemies do
      self.room.enemies[i]:update()
    end
  end

  for i = 0, < #self.room.spike_rollers do
    self.room.spike_rollers[i]:update()
  end

  for i = 0, < #self.room.walls do
    self.room.walls[i]:simple_collision(game.room.player.hb_receiver, game.room.player.pos)

    for j = 0, < #self.room.enemies do
      self.room.walls[i]:simple_collision(self.room.enemies[j].hb_receiver, self.room.enemies[j].pos)
    end
  end

  if self.transition == TransitionState.None and self:should_go_next_room() then
    self:go_next_room()
  end

  Gamepad_Prev = $GAMEPAD1
end

function State:draw()
  for i = 0, < #self.room.walls do
    self.room.walls[i]:draw()
  end

  for i = 0, < #self.room.stairs do
    self.room.stairs[i]:draw(i)
  end

  self.room.player:draw()

  for i = 0, < #self.room.enemies do
    self.room.enemies[i]:draw()
  end

  for i = 0, < #self.room.spike_rollers do
    self.room.spike_rollers[i]:draw()
  end

  for i = 1, 3 do
    $DRAW_COLORS = i <= self.room.player.health_points and 0x1243 or 0x1240
    oval(125 + i*8, 4, 6, 6)
  end

  if self.transition ~= TransitionState.None then
    local t = (self.frame_counter - self.transition_startfc) * (game.room_index < 7 and 4 or 1)

    switch self.transition do
    case TransitionState.Enter then
      $DRAW_COLORS = 0x4444

      rect(0, t, 160, 160 - t)
      if t < 160 then
      else
        game:start_transition(TransitionState.None)
      end
    case TransitionState.Exit then
      $DRAW_COLORS = 0x4444
      rect(0, 0, 160, t)

      if t < 160 then
      else
        game:start_transition(TransitionState.Enter)
        if game.room_index < 7 then
          game:reset_room()
        else
          self:start_transition(TransitionState.End)
        end
      end
    case TransitionState.End then
      $DRAW_COLORS = 0x4123
      blit(final_art, 0, 0, final_art_width, final_art_height, final_art_flags)
    end
  end
end

local function update()
  game.frame_counter = game.frame_counter + 1
  game.seg_frame_counter = game.frame_counter % 60

  game:update()
  game:draw()
end

## setup_wasm4_callbacks(update)

## print('total used size: ', pixel_art.type.size + final_art.type.size + State.value.size)
